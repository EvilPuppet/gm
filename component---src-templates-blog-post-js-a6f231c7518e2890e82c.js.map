{"version":3,"sources":["webpack:///./src/css/blog-post.js","webpack:///./src/templates/blog-post.js"],"names":["Container","styled","animated","main","BlogPostTemplate","data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","frontmatter","description","excerpt","className","itemScope","itemType","itemProp","style","textAlign","date","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel"],"mappings":"wLAGaA,EAAYC,YAAOC,IAASC,MAAnB,uEAAGF,CAAH,waC8DPG,UA1DU,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAmBR,EAAnBQ,SAAUC,EAAST,EAATS,KAElB,OACE,kBAAC,IAAD,CAAQR,SAAUA,EAAUM,MAAOH,GACjC,kBAAC,IAAD,CACEG,MAAOL,EAAKQ,YAAYH,MACxBI,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,UAEpD,kBAACjB,EAAD,KACA,6BACEkB,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAIC,SAAS,YAAYd,EAAKQ,YAAYH,OAC1C,2BAAOU,MAAO,CAACC,UAAU,WAAYhB,EAAKQ,YAAYS,OAExD,6BACEC,wBAAyB,CAAEC,OAAQnB,EAAKoB,MACxCN,SAAS,gBAEX,8BAEF,yBAAKH,UAAU,iBACb,wBACEI,MAAO,CACLM,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGnB,GACC,kBAAC,OAAD,CAAMoB,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAApC,KACKvB,EAASE,YAAYH,QAI9B,4BACGE,GACC,kBAAC,OAAD,CAAMmB,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC7BtB,EAAKC,YAAYH,MADpB","file":"component---src-templates-blog-post-js-a6f231c7518e2890e82c.js","sourcesContent":["import { animated } from 'react-spring';\nimport styled from \"styled-components\";\n\nexport const Container = styled(animated.main)`\n    grid-area: content;\n    max-width: 900px;\n    margin: 0 auto;\n    align-self: center;\n    padding: 30px;\n    display: grid;\n    grid-template-columns: auto;\n    gap: 15px;\n    justify-content: center;\n    margin-bottom: 100px;\n\n    small {\n        text-align:center;\n        color: #888888;\n    }\n\n\n    h1 {\n        color: #888888;\n        text-transform: uppercase;\n        letter-spacing: 1px;\n        font-weight: 500;\n        text-align:center;\n\n        &:hover {\n            color: #585858;\n        }\n    }\n\n    h2 {\n        color: #585858;\n        letter-spacing: 1px;\n        font-weight: 500;\n        \n    }\n    \n\n\n\nimg:hover {\n    opacity: 0.8;\n    fill:#888888;\n}\n\n`;\n","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { Container } from '../css/blog-post';\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const { previous, next } = data;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <Container>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <small style={{textAlign:\"center\"}}>{post.frontmatter.date}</small>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ? {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} ?\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}